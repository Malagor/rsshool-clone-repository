let petsArray = [
  {
    "name": "Katrine",
    "img": "../assets/images/katrine.png",
    "type": "Cat",
    "breed": "British Shorthair",
    "description": "Katrine is a beautiful girl. She is as soft as the finest velvet with a thick lush fur. Will love you until the last breath she takes as long as you are the one. She is picky about her affection. She loves cuddles and to stretch into your hands for a deeper relaxations.",
    "age": "6 months",
    "inoculations": ["panleukopenia"],
    "diseases": ["none"],
    "parasites": ["none"]
  },
  {
    "name": "Jennifer",
    "img": "../assets/images/jennifer.png",
    "type": "Dog",
    "breed": "Labrador",
    "description": "Jennifer is a sweet 2 months old Labrador that is patiently waiting to find a new forever home. This girl really enjoys being able to go outside to run and play, but won't hesitate to play up a storm in the house if she has all of her favorite toys.",
    "age": "2 months",
    "inoculations": ["none"],
    "diseases": ["none"],
    "parasites": ["none"]
  },
  {
    "name": "Woody",
    "img": "../assets/images/woody.png",
    "type": "Dog",
    "breed": "Golden Retriever",
    "description": "Woody is a handsome 3 1/2 year old boy. Woody does know basic commands and is a smart pup. Since he is on the stronger side, he will learn a lot from your training. Woody will be happier when he finds a new family that can spend a lot of time with him.",
    "age": "3 years 6 months",
    "inoculations": ["adenovirus", "distemper"],
    "diseases": ["right back leg mobility reduced"],
    "parasites": ["none"]
  },
  {
    "name": "Sophia",
    "img": "../assets/images/sophia.png",
    "type": "Dog",
    "breed": "Shih tzu",
    "description": "Sophia here and I'm looking for my forever home to live out the best years of my life. I am full of energy. Everyday I'm learning new things, like how to walk on a leash, go potty outside, bark and play with toys and I still need some practice.",
    "age": "1 month",
    "inoculations": ["parvovirus"],
    "diseases": ["none"],
    "parasites": ["none"]
  },
  {
    "name": "Timmy",
    "img": "../assets/images/timmy.png",
    "type": "Cat",
    "breed": "British Shorthair",
    "description": "Timmy is an adorable grey british shorthair male. He loves to play and snuggle. He is neutered and up to date on age appropriate vaccinations. He can be chatty and enjoys being held. Timmy has a lot to say and wants a person to share his thoughts with.",
    "age": "2 years 3 months",
    "inoculations": ["calicivirus", "viral rhinotracheitis"],
    "diseases": ["kidney stones"],
    "parasites": ["none"]
  },
  {
    "name": "Charly",
    "img": "../assets/images/charly.png",
    "type": "Dog",
    "breed": "Jack Russell Terrier",
    "description": "This cute boy, Charly, is three years old and he likes adults and kids. He isn’t fond of many other dogs, so he might do best in a single dog home. Charly has lots of energy, and loves to run and play. We think a fenced yard would make him very happy.",
    "age": "8 years",
    "inoculations": ["bordetella bronchiseptica", "leptospirosis"],
    "diseases": ["deafness", "blindness"],
    "parasites": ["lice", "fleas"]
  },
  {
    "name": "Scarlett",
    "img": "../assets/images/scarlett.png",
    "type": "Dog",
    "breed": "Jack Russell Terrier",
    "description": "Scarlett is a happy, playful girl who will make you laugh and smile. She forms a bond quickly and will make a loyal companion and a wonderful family dog or a good companion for a single individual too since she likes to hang out and be with her human.",
    "age": "3 months",
    "inoculations": ["parainfluenza"],
    "diseases": ["none"],
    "parasites": ["none"]
  },
  {
    "name": "Freddie",
    "img": "../assets/images/freddie.png",
    "type": "Cat",
    "breed": "British Shorthair",
    "description": "Freddie is a little shy at first, but very sweet when he warms up. He likes playing with shoe strings and bottle caps. He is quick to learn the rhythms of his human’s daily life. Freddie has bounced around a lot in his life, and is looking to find his forever home.",
    "age": "2 months",
    "inoculations": ["rabies"],
    "diseases": ["none"],
    "parasites": ["none"]
  }
];

function createBigTable(arr, count = 48) {
  const fieldSetObj = {};
  const keys = Object.keys(arr[0]);
  const newBigArray = [];

  function randomIndex(max) {
    return Math.floor(Math.random() * Math.floor(max));
  }

  arr.forEach(item => {
    keys.forEach(key => {
      if (fieldSetObj[key]) {
        const curArr = fieldSetObj[key];
        curArr.push(item[key]);
      } else {
        fieldSetObj[key] = [];
        fieldSetObj[key].push(item[key]);
      }
    })
  });

  for (let i = 0; i < count; i++) {
    const petObg = {};
    const lengthArrays = fieldSetObj[keys[0]].length;

    keys.forEach(key => {
      petObg[key] = fieldSetObj[key][randomIndex(lengthArrays)];
    });

    newBigArray.push(petObg);
  }

  return newBigArray;
}

petsArray = createBigTable(petsArray);

// console.log(petsArray);

document.addEventListener("DOMContentLoaded", function () {

  // Mobile menu
  
  const $toggleMenuBtn = document.querySelector('.nav__mobile-toggle');
  const $menu = document.querySelector('nav .menu');
  const $nav = document.querySelector('nav');
  const $header = document.querySelector('header.header');
  const $headerLogo = document.querySelector('.header__logo');
  
  const mobileMenu = () => {
    if (document.body.style.position !== 'fixed') {
      document.body.style.position = 'fixed';
    } else {
      document.body.style.position = '';
    }
  
    $toggleMenuBtn.classList.toggle('open');
    $menu.classList.toggle('menu-mobile');
    $headerLogo.classList.toggle('header__logo--mobile-menu-open');
  
    if ($menu.classList.contains('menu-mobile')) {
      $menu.insertAdjacentHTML('beforebegin', '<div id="overlay"></div>');
    } else {
      $nav.removeChild(document.querySelector('#overlay'));
    }
  
    const headerPosition = getComputedStyle($header).position;
  
    if (headerPosition === 'absolute') {
      $header.style.position = 'fixed'
    } else {
      $header.style.position = '';
    }
  };
  
  // Обрабатываем клики для закрытия мобильного меню
  
  document.body.addEventListener('click', event => {
    const target = event.target;
  
    // закрытие меню по нажатию на кнопку
    if (target.closest('.nav__mobile-toggle')) {
      mobileMenu();
    }
  
    if (target.closest('.disabled')) {
      event.preventDefault();
    }
  
    // Закрытие меню на нажатие мимо поля меню, и не в самом меню
    if (!target.closest('.menu.menu-mobile')
      && !target.closest('.nav__mobile-toggle')
      && $menu.classList.contains('menu-mobile')) {
      mobileMenu();
    }
  
    // Закрытие мобильного меню при переходе по ссылке в модильном меню
    if (target.closest('.menu__link') && $menu.classList.contains('menu-mobile')) {
      mobileMenu();
    }
  });
  class PetsGalery {
    constructor(el, petsData) {
  
      if (typeof el === "string") {
        this.$el = document.querySelector(el);
      } else {
        this.$el = el;
      }
  
      this.data = petsData;
    }
  
    render() {
      throw new Error('Этот метод нужно переопределить');
    }
  
    getRandomItems(count, max, oldIndex = []) {
      const result = [];
      while (result.length < count) {
        const curNum = Math.floor(Math.random() * Math.floor(max));
        if (result.indexOf(curNum) === -1 && result.indexOf(oldIndex) === -1) {
          result.push(curNum)
        }
      }
      return result;
    }
  
    toHTML = (pet, index) => {
      const {name, img} = pet;
      return `
          <li class="gallery-item" data-index="${index}">
            <img src="${img}" alt="Katrine" class="gallery-item__image">
            <div class="gallery-item__title">${name}</div>
            <button class="btn btn--transparent pet-details">Learn more</button>
          </li>`
    }
  }
  
  class PetsGaleryTable extends PetsGalery {
    constructor(el, petData) {
      super(el, petData);
      this.init();
    }
  
    init() {
      this.totalItem = this.data.length;
      this.currentPage = 1;
      this.countItemPerPage();
      this.lastPageNumber = Math.ceil(this.totalItem / this.itemsPerPage);
  
      this.render();
    }
  
    countItemPerPage() {
      const width = screen.width;
      if (width < 480) {
        this.itemsPerPage = 3;
      } else if (width < 992) {
        this.itemsPerPage = 6;
      } else {
        this.itemsPerPage = 8;
      }
  
      this.totalPages = Math.ceil(this.totalItem / this.itemsPerPage);
    }
  
    resize() {
      this.countItemPerPage();
      this.render();
    }
  
    render() {
      const start = (this.currentPage - 1) * this.itemsPerPage;
      let finish = (this.currentPage * this.itemsPerPage);
      if (finish > this.totalItem) finish = this.totalItem;
  
      const curArr = this.data.filter((val, index) => {
        return start <= index && index < finish;
      });
  
      this.$el.classList.remove('show');
      this.$el.innerHTML = '';
  
      curArr.forEach((pet, index) => {
        this.$el.insertAdjacentHTML('beforeend', this.toHTML(pet, ((this.currentPage - 1) * this.itemsPerPage) + index))
      });
      setTimeout(() => {
        this.$el.classList.add('show');
      }, 200);
    }
  
    nextPage() {
      if (!(this.currentPage + 1) < this.lastPageNumber) {
        ++this.currentPage;
      }
    }
  
    prevPage() {
      if (!(this.currentPage - 1) < 1) {
        --this.currentPage;
      }
    }
  
    firstPage() {
      this.currentPage = 1;
    }
  
    lastPage() {
      this.currentPage = this.lastPageNumber;
    }
  }
  
  const tablePets = document.querySelector('.gallery-table .gallery__list');
  
  if (tablePets) {
    const petsTable = new PetsGaleryTable(tablePets, petsArray);
  
    /*
     * ПАГИНАЦИЯ
     * и вывод карточек животных на страницу
     */
    const $pagination = document.querySelector('#pagination');
    const $firstPageBtn = document.querySelector('#firstPage .gallery__arrow');
    const $prevPageBtn = document.querySelector('#prevPage .gallery__arrow');
    const $nextPageBtn = document.querySelector('#nextPage .gallery__arrow');
    const $lastPageBtn = document.querySelector('#lastPage .gallery__arrow');
    const $currentPageBlock = document.querySelector('#currentPage .gallery__arrow.active');
    const disabled = 'gallery__arrow--disabled';
  
    const controlsButtons = [
      $firstPageBtn,
      $prevPageBtn,
      $nextPageBtn,
      $lastPageBtn
    ];
  
    function disabledBtn(arr) {
      controlsButtons.forEach(el => {
        el.classList.remove(disabled);
      });
  
      if (arr) {
        arr.forEach(el => {
          el.classList.add(disabled);
        })
      }
    }
  
    function isBtnDisabled(el) {
      return el.classList.contains('gallery__arrow--disabled');
    }
  
    /*  Отключаем кнопки при нахождении на первой и последней
     *  странице
     */
  
    if (petsTable.currentPage === petsTable.totalPages) {
      disabledBtn([$firstPageBtn, $prevPageBtn, $lastPageBtn, $nextPageBtn]);
    } else {
      disabledBtn([$firstPageBtn, $prevPageBtn]);
    }
  
  
    /*
     * Обработчик нажатий на пегинацию
     */
    $pagination.addEventListener('click', event => {
      const target = event.target;
  
      // проверяем, если по нужной кнопке и кнопка активна
  
      // Первая страница
      if (target.closest('#firstPage') && !isBtnDisabled(target)) {
        petsTable.firstPage();
        petsTable.render();
        disabledBtn([$firstPageBtn, $prevPageBtn]);
      }
  
      // Предыдущпая страница
      if (target.closest('#prevPage') && !isBtnDisabled(target)) {
        if ((petsTable.currentPage - 1) < 1) return;
  
        if ((petsTable.currentPage - 1) === 1) {
          disabledBtn([$firstPageBtn, $prevPageBtn]);
        } else {
          disabledBtn([]);
        }
  
        petsTable.prevPage();
        petsTable.render();
      }
  
      //Следующая страница
      if (target.closest('#nextPage') && !isBtnDisabled(target)) {
        if ((petsTable.currentPage + 1) > petsTable.lastPageNumber) return;
  
        if ((petsTable.currentPage + 1) === petsTable.lastPageNumber) {
          disabledBtn([$lastPageBtn, $nextPageBtn]);
        } else {
          disabledBtn([]);
        }
  
        petsTable.nextPage();
        petsTable.render();
      }
  
      //Посдедняя странциа
      if (target.closest('#lastPage') && !isBtnDisabled(target)) {
        petsTable.lastPage();
        petsTable.render();
        disabledBtn([$lastPageBtn, $nextPageBtn]);
      }
  
      $currentPageBlock.innerText = petsTable.currentPage;
  
    });
  }
  // /. Пагинация
  class PetsGalerySlider extends PetsGalery{
    constructor(el, data) {
      super(el, data);
      this.init();
    }
  
    init() {
      this.countItemPerPage();
      this.render();
      this.events();
    }
  
    events() {
      document.querySelector('.gallery').addEventListener('click', event =>{
        const {target} = event;
  
        if (target.closest('.gallery__arrow--left') || target.closest('.gallery__arrow--right')){
          this.render();
        }
      })
    }
  
    countItemPerPage() {
      const width = screen.width;
      if (width < 700) {
        this.itemsPerPage = 1;
      } else if (width < 990) {
        this.itemsPerPage = 2;
      } else {
        this.itemsPerPage = 3;
      }
    }
  
    render() {
      this.$el.classList.remove('show');
      this.$el.innerHTML = '';
      this.getRandomItems(this.itemsPerPage, this.data.length).forEach(index => {
        this.$el.insertAdjacentHTML('beforeend', this.toHTML(this.data[index], index));
      });
      setTimeout(() => {
        this.$el.classList.add('show');
      }, 200);
    }
  }
  
  const slider = document.querySelector('.gallery .gallery__list');
  
  if (slider) {
    new PetsGalerySlider(slider, petsArray);
  }
  class Modal {
    constructor() {
      this.init();
    }
  
    init() {
      document.body.insertAdjacentHTML('beforeend', '<div id="modal" class="modal"></div>');
      this.$el = document.querySelector('#modal');
      return this;
    }
  
    setContent(data) {
      this.data = data;
      return this;
    }
  
    toHTML(data) {
      const {name, img, type, breed, description, age, inoculations, diseases, parasites} = data;
      return `
      <div class="modal__wrapper">
      <button id="modalClose" class="btn btn--transparent modal__close">
        <svg class="icon icon-close">
          <use xlink:href="../assets/icons/svg-sprites.svg#modal-close"></use>
        </svg>
      </button>
      <div class="modal__image">
        <img src="${img}" alt="${name}">
      </div>
      <div class="modal__text">
        <div class="modal__name">${name}</div>
        <div class="modal__breed">${type}- ${breed}</div>
        <div class="modal__description">${description}</div>
        <ul class="modal__list">
          <li class="modal__item"><span><span class="modal__item-label">Age:</span>${age}</span></li>
          <li class="modal__item"><span><span class="modal__item-label">Inoculations:</span>${inoculations}</span></li>
          <li class="modal__item"><span><span class="modal__item-label">Diseases:</span>${diseases}</></li>
          <li class="modal__item"><span><span class="modal__item-label">Parasites:</span>${parasites}</></li>
        </ul>
      </div>
    </div>
      `
    }
  
    openModal() {
      this.$el.insertAdjacentHTML('beforebegin', '<div id="overlay" style="top: 0;"></div>');
  
      this.$el.innerHTML = '';
      this.$el.insertAdjacentHTML('beforeend', this.toHTML(this.data));
  
      this.$el.classList.add('open');
    }
  
    closeModal() {
      if (this.$el.classList.contains('open')) {
        this.$el.classList.remove('open');
      }
      document.body.removeChild(document.querySelector('#overlay'));
    }
  }
  
  const petsModal = new Modal();
  
  document.body.addEventListener('click', event => {
  
    const target = event.target;
  
    if (target.closest('.gallery-item')) {
      disableScroll();
      const index = target.closest('.gallery-item').dataset.index;
      petsModal.setContent(petsArray[index]).openModal();
    }
  
    if (target.closest('#modalClose') || target.closest('#overlay')) {
      enableScroll();
      petsModal.closeModal();
    }
  });


  // Обработка скролла страницы
  window.addEventListener('scroll', () => {
    const $headerScroll = document.querySelector('.header');
    if (pageYOffset > 150) {
      $headerScroll.classList.add('header--scroll');
    } else {
      $headerScroll.classList.remove('header--scroll');
    }
  });

  // Отключение и включение скролла
  function disableScroll() {
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
    window.onscroll = function () {
      window.scrollTo(scrollLeft, scrollTop);
    };
  }

  function enableScroll() {
    window.onscroll = function () {
    };
  }
});